Author: Ross Studtman

Tutorial: John Purcell's "Servlets and JSPs: Creating Web Applications With Java"
John's website: CaveOfProgramming.com
Notes for videos 33 through 36

Video #33: Connecting to a database
Video #34: JNDI DataSource
Video 35 setup: putting data inside the "webshop" database table "users".
Video #35: Querying Databases
Video #36: Inserting Data Into Databases

Project Name: JSP_Tutorial_6 --> when creating this project be sure to include a web.xml


VIDEO #33 Notes:

	I apologize for the length of these Video 33 notes. I was brand new to MySQL & MySQL Workbench so there are notes here
	to help a future-me looking back or maybe someone like me using these notes to help them along. Additionally, I came
	in with scant information regarding how to set up databases in general. Hence much of this is new to me and this 
	accounts for the length of this video's notes.

	Connecting to a Database: JDBC --> this is Java's way of connecting to databases, it is not JSP specific.
	
	Download & Install:
		[ ] MySQL
		
			I'm an utter newb at installing databases and running them so I used the following tutorial:
				https://www.youtube.com/watch?v=-cHS4HoEFV8
				
			Went here (MySql Downlad page): http://dev.mysql.com/downloads/windows/installer/
				Downloaded the Windows mysql-installer-web-community-5.6.19.0.msi --> ran the installer:
					Chose to install the "full" version that includes, among other things:
					
					[ ] MySQL Workbench
					[ ] Driver that is appropriate for you database --> Connector J 5.1.30 which installation put
						in Program Files (x86)/MySQL/Connector J 5.1.30
						
							--> inside this folder is the mysql-connector-java-5.1.30-bin.jar (932 KB)
							--> Inside this folder are three other folders: docs, src, and src.zip. (they total about 7 MB)
								--> I don't know what those are for but they look important and I wonder if I simply copy and
									paste the .jar file into my Eclipse project...won't it need some of that other 7 MBs of information
									in the other folders and files? And if not, why does the "Connector/J" include all that stuff
									if I don't need it for my project to be connected to a MySQL database?
									--> Some of this stuff I simply have to take on faith and try it, I guess.
									
							--> So I followed John's tutorial on including JAR files into my project: JSP_Tutorial_Three: Video #16.
							
								--> I also ran across this tutorial from mysql.com about installing Connector/J:
										http://dev.mysql.com/doc/connector-j/en/connector-j-installing.html
									
										Difference between binary and source installations: 
											http://stackoverflow.com/questions/5280906/difference-between-binary-release-and-source-release
										
										This source says: "If you are developing servlets or JSPs, and your application server is J2EE-compliant, 
										you can put the driver's .jar file in the WEB-INF/lib subdirectory of your webapp, as this is a standard 
										location for third party class libraries in J2EE web applications."
										
											--> Exactly where John had recommended to install. Good.
							
		
		[ ] Create a MySQL Database
		
			You can do this by using the MySQL Workbench or by using the command prompt.
			Here I use the MySQL Workbench. In JSP_Tutorial_8, there are several detailed examples of creating a simple database and table
			using the command prompt. Ultimately the command prompt was easier and quicker to use.
		
			[ ] Learning how to use MySQL Workbench:
					Youtube Tutorial from MySQL: https://www.youtube.com/watch?v=X_umYKqKaF0&list=PLWx5a9Tn2EvH0q2WXpUBqptxi5640qk9O	
					
						By watching these videos I was able to confirm that:
							[ ] I do have a MySQL server running.
							[ ] That there are a couple of databases on that server (the sample ones -- they came with the "full" version that I downloaded). 
								[ ] I was able to play with a couple of the features the videos showed. 
							
			[ ] A quick tutorial from MySQL.com on how to create a database: 
				http://dev.mysql.com/doc/workbench/en/wb-getting-started-tutorial-creating-a-model.html		
				
					
			[ ] Build the database that John already has built:
			
				[ ] In MySQL Workbench: (a source: http://dev.mysql.com/doc/workbench/en/wb-getting-started-tutorial-creating-a-model.html)
				
					[ ] File --> New Model --> click the "+" on the right side of the screen --> rename to "webshop" (to be like John's tutorial).
					[ ] Double-click "Add Table" --> in lower pane rename to "users"
					[ ] click under "Column Name" to add a column, I named mine "user_id" and checked the boxes PK, NN, and AI (primary key, non null, auto increment)
					[ ] add column "email" varchar(45) non null
					[ ] add column "password" varchar(45) non null
					[ ] Save the model: 
						File --> Save Model --> I saved mine to the same location as my Eclipse projects, in a new folder named "Database_Stuff":
							Eclipse Projects/Database_Stuff/jsp_tutorial_6_video_33.mwb
							
					[ ] "Forward Engineer" this model to my live MySQL server:
						Database --> Forward Engineer --> a wizard pops up: set parameters: next --> set options: next --> select objects: next --> 
						review script to be executed: next -->	Forward Engineering Finished Successfully: close.
						
					[ ] Look in "Navigator" pane on left, look for "Schemas" and refresh ("yin-yang" arrows) --> can see "webshop" schema
					
					[ ] Hopefully that worked! If it did not, I feel for you. But take heart, every single time something has failed to work for me in the programming
						world I have always come away with richer knowledge for having had to find the answer. Always. I may not like the amount of effort it 
						sometimes takes to find the solution but you will come away enriched. If you skipped some of the above tutorials give them a look.
						If you're in the same boat I was in, ie the boat filled with people who "don't have an inkling of a clue how this stuff works" then
						I think watching those tutorials is a must. So a couple of hours spent with MySQL workbench tutorials was not out of line for me.
							
						Though, it seems it would be simpler to simply write the database creation script and execute it rather than mess with all that.	
						
						AND I CAN CONFIRM, that having written the tutorial notes for JSP_Tutorial_8 that using the command prompt is far simpler by being
						more direct and plain to understand. For instance, this creates a database and a table and a user: 
						(copy and pasted from JSP_Tutorial_8 notes):
						
								Create the database and table, then insert test data:	
                  	
								Open command prompt.
						       		type in:	"mysql -u root -p".
						       		type in:	the password				--> access
						       		type in: 	"CREATE DATABASE vid_53;"	--> Query Ok, 1 row affected
						       		type in:	"use vid_53;"				--> Database changed
						       		type in: 	"create table images(id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, imageName VARCHAR(25), 
						       					attribution_url varchar(100), attribution_name varchar (25), image_extension varchar (5),
						       					number_of_rankings int, average_ranking float);"
						       												--> Query OK, 0 rows affected.
						       		type in: 	"insert into images(imageName, image_extension, number_of_rankings, average_ranking) values ('WantedBook', 'jpg', 5, 3);" 
						       												--> Query OK, 1 row affected.
						       												
									type in: 	....do the same thing for the other 8 images....   
									
									type in: 	"select * from images;" 	--> I can see the 9 entries I made into the database. 9 Rows in set.
									
									
									Now create a user and password for that database:
									
										type in: 	"create user 'bunny'@'localhost' identified by 'rabbit';"								
										type in: 	"grant all privileges on vid_53.* to 'bunny'@'localhost';"
										type in:	"flush privileges;"								
										
										Now test the new user, try to log in as new user:
										
										type in: 	"exit"
										type in: 	"mysql -u bunny -p"
										type in:	"rabbit"	--> and user "bunny" is granted access to vid_53 database.
										
										type in: 	"show databases;" 		--> user can see vid_53
										type in:	"use vid_53;"			--> Database changed
										type in:	"show tables;"			--> shows the images table
										type in: 	" select * from images;"--> see the 9 records that are in there.	
		
		
		
		[ ] Get Eclipse to recognize the MySQL database
		
			I thought I needed to get Eclipse to recognize the MySQL server and database but I'm not certain you need to. Those notes on how to
			do this are included as Supplemental Video #33 notes below.
		
			John indicates that the necessary mysql .jar ("Connector/J") is often already included in web applications by Eclipse. It is found at:
			
				 JSP_Tutorial_6 / Java Resources/ Libraries / mysql-connector-java-5.1.30-bin.jar
				 
				 ...or maybe that's the one I pasted in, if so the one that was included when Eclipse made the project would be here:
				 JSP_Tutorial_6/Java Resources/Libraries/Web App Libraries/mysql-connector-java-5.1.30-bin.jar
				 
			This .jar file can also be found where you installed MySQL. For me it is at:
			
				C:/Program Files (x86)/MySQL/Connector J 5.1.30/mysql-connector-java-5.1.30-bin.jar
				
			This .jar file should be added to Tomcat:
			
				Copy and past the Connector/J .jar in the Tomcat lib:
			
					Program Files / Apache Software Foundation / Tomcat 7.0 / lib <-- goes in there.			
					
					
		I created the following to demonstrate these concepts:
				
					* demo -- a package
					* Video_33_controller.java -- a servlet
					
		[ ] Video_33_Controller:
			
			Load the MySQL driver. Calling the forName() method loads the class given as an argument:			
				
					try {
						Class.forName("com.mysql.jdbc.Driver");		// the Driver class located in com.mysql.jdbc package, with the .jar noted above.
					} catch (ClassNotFoundException e) {
						
						// Could not find the Driver file
						out.println("Can't load database driver");
						e.printStackTrace();
					}				
				
			
			Create a Connection object & make a connection:
			
					Connection connection = null; 		// import the java.sql.Connection; not the com.mysql.jdbc.Connection
					
					try {
						connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/webshop", "webapp", "hello");
					} catch (SQLException e) {
						
						// Cannot connect to database			
						out.println("Can't connect to database"); 		
						e.printStackTrace();
					}
			
			Do something while database connection is open:
			
					PrintWriter out = response.getWriter();
					out.println("<h1>Connection to DB Successful!</h1>");
					
			
			Close the connection:
			
					try {
						if(connection !=null){
							conn.close();
						}
						
					} catch (SQLException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}			
			
					
	Next tutorial: a better method for connecting to databases.					
					
					
	Supplemental Video #33 notes:				
				
		You don't need to do this. I was initially confused about what I needed to do to get Eclipse to "see" the MySQL server.
		Then I discovered I didn't need to do this. But of the research I performed for getting Eclipse to "see" the MySQL
		server, the following seemed to answer a few of my questions:
		
		(source: http://www.eclipse.org/forums/index.php/t/74927/)
			
		Eclipse's database connections are located:
				
			Window --> Preferences --> Data Management --> Connectivity --> Database Connectivity & Driver Definitions
					
		Driver Definitions: Add:
		
			Name/Type tab: Available driver templates ...MySQL JDBC Driver 5.1

				Connector/J version 5.1 is compatible with MySQL Server version 5.6 (http://dev.mysql.com/doc/connector-j/en/connector-j-versions.html)
														
			JAR List tab: 
			
			Properties tab:
			
					Connection URL: jdbc:mysql://yourHost:3306/aDatabaseWhichExists
					Database Name: aDatabaseWhichExists
					Driver Class: com.mysql.jdbc.Driver
					Password: TheCorrectPassword
					User ID: UserNameWhichExistsInDatabase
									
				
VIDEO #34 Notes:

	Setting Up A JNDI Data Source
	
	This technique for connecting to a database supports connection pooling.
	
		I created the following for this tutorial:
		
			* Video_34_DataSource.java -- a servlet (we'll be using the init() method)
			
	
	John points us to the following resource since we are going to need to copy some values from it:
	
		Apache Tomcat help page: JNDI Datasource HOW-TO (http://tomcat.apache.org/tomcat-7.0-doc/jndi-datasource-examples-howto.html#MySQL_DBCP_Example)
	
			
	We need to have a database up and running on MySQL.
	We need to have a user that has access to the DB and has a password assigned.
	
		The cited source above says "Your MySQL user *must* have a password assigned. The driver will fail if you try to connect with an empty password."
		
	We need to edit 2 files:
		
		[ ] Context.xml in Tomcat
		
			In Eclipse's Project Explorer look for the "Servers" project, this project was built automatically for you.
				Find the context.xml --> open in text editor.
			
				Copy the <context> information from the internet resource cited above --> paste into context.xml
			
				Make the following changes to what was pasted in to reflect your database information:
				
				  <Resource name="jdbc/webshop" 
				  			auth="Container" type="javax.sql.DataSource"
				            maxActive="100" maxIdle="30" maxWait="10000"
				            username="webapp" password="hello" 
				            driverClassName="com.mysql.jdbc.Driver"
				            url="jdbc:mysql://localhost:3306/webshop"/>				
					
		[ ] In our project's WebContent/WEB-INF/web.xml:
		
			Copy the <resource-ref> info from http://tomcat.apache.org/tomcat-7.0-doc/jndi-datasource-examples-howto.html#MySQL_DBCP_Example.
			Paste into web.xml.
			
				Make the following changes to what was pasted in to reflect your database information:				
						
				  <resource-ref>
				    <description>DB Connection</description>
				    <res-ref-name>jdbc/webshop</res-ref-name>
				    <res-type>javax.sql.DataSource</res-type>
				    <res-auth>Container</res-auth>
				  </resource-ref>
				
				
		[ ] Create the "webapp" user with password of "hello":
				
				MySQL Workbench approach:
				
					Ultimately I don't think this worked (for me) because when I went to "Management" "Users and Privileges" it didn't show the new user.
				
						In MySQL Workbench:
							File --> Open Model --> select jsp_tutorial-6_video_33.mwb
							Expand the "Schema Privileges" --> click "Add User" --> give name & password
							Give the user the "owner" role.
							Save the model.
						
					
					Command prompt approach:
					
						Tutorial for adding new user: https://www.digitalocean.com/community/tutorials/how-to-create-a-new-user-and-grant-permissions-in-mysql
								
						Log into the MySQL server: mysql -u root -p
						Enter password. See command prompt change to "mysql>".
						
						Create the "webapp" user with a password of "hello", who has access to the webshop database:
						
						
								CREATE USER 'webapp'@'localhost' IDENTIFIED BY 'hello';
								GRANT ALL PRIVILEGES ON webshop.* TO 'webapp'@'localhost';
								FLUSH PRIVILEGES;

							
						How to change back to "root" user:
						
							If already at mysql prompt: "mysql>" then type "exit" to exit.
							Now type: mysql -u root -p
							Get prompted for password --> enter password.
							Now you've switched to root user.			
							
						How to switch to different user:
							
							If already at mysql prompt: "mysql>" then type "exit" to exit.		
							Now type: mysql -u webapp -p
							Get prompted for password --> enter "hello" password.
							Now you've switched to "webapp" user.
							
							Optionally, you can put mysql login info all on one line, only detail here is no space between "-p" and the password:
								mysql -u webapp -phello					
		
						
				
		[ ] Video_34_DataSource:
		
			In init()
				
				Use an InitialContext object to lookup "java:comp/env" to obtain a Context object.
				Use that Context object to lookup "jdbc/yourDatabaseName" to obtain a DataSource object.
			
			In doGet()
			
				Use that DataSource object to make a Connection object that will connect you to the database

			
		Run the code.
		
			Celebrate that it works!
		
			
VIDEO #35 Setup:					
					
	[ ] Set up some data in the "webshop" database.
	
		[ ] Open command prompt.
		
			I put in the following at the prompt:
			
				mysql -u webapp -p
				
			I was then prompted for a password and entered "hello".
			
			I was granted access.
			
			I typed in "use webshop" to change to that database.
			I typed in "show tables;" to show the tables --> one table: "users"
			I typed in "select * from users;" --> "empty set"

			
			Add data:
			
			I typed in "desc users;" to remind me of the table's structure.			
			
			I typed in "insert into users(email, password) values("a@a.com", "abC123"); --> 1 row affected.
			I typed in "insert into users(email, password) values ("b@b.com", "ddD123"); --> 1 row affected.
			
			Note: Remember the Video_35_UserBean validates the email and password; I have it set to look for
			a password containing at least 5 characters, that must include 1 uppercase, 1 lowercase, and 1 digit.
			
			Okay, good, there's now data in the "users" table of the "webshop" database. 

VIDEO #35 Notes:

	Querying Databases
	
	Web user logs in by supplying their username and password.
	
		I created the following for this tutorial:
		
			* index.jsp -- website home page with hyperlink 
			* Video_35_login.jsp -- a login form
			* Video_35_css.css -- css for login form
			* Video_35_innerSanctum.jsp -- where succesfully logged in users go.
			* Video_35_errorPage.jsp -- shouldn't see this at all
			* Video_35_UserBean.java -- a JavaBean with validation
			* Video_35_Controller.java -- a servlet
			* DirectorEnums -- Enum values for URL parameter "director"
			
	[ ] DirectorEnums
	
		Basic set of Enums:
			LOGIN, DOLOGIN,	NO_VALUE, INCORRECT_VALUE
					
	[ ] index.jsp
	
		Create hyperlink to Video_35_innerSanctum.jsp
		
			!NOT IMPLEMENTED IN THIS VIDEO OR NOTES:
			
				If user has not logged in yet, route them to Video_35_login.jsp.
			
			
				TO DO: currently link goes directly to login page. To fix this?
				
					? Set a cookie?
					? Hyperlink to Video_35_innerSanctum would route to switch 
					  where we would check if the cookie exists, if it doesn't 
					  exist then route them to the login page, if it exist then
					  route them to innerSanctum?
			
			
	[ ] Video_35_login.jsp
	
		[ ] Create form
		
			method set to POST
			action set to:
			
				action="<%= response.encodeURL(request.getContextPath() + "/Video_35_Controller?director=doLogin") %>"
				
			id="loginForm" --> for css
			
			hidden <input> with name set to "director" and value set to "doLogin"
			
			<input> for email and password:
			
				set their values to attributes set on the HttpServletRequest object, for example:
				
					value="<%= request.getAttribute("email") %>"
					
			a place for the error message to go:
			
				<p class="login-error"><%= request.getAttribute("errorMessage") %></p>
			
				
	[ ] Video_35_css.css		
		css to prettify the form.
		css for error message.
				
	[ ] Video_35_innerSanctum.jsp --> simple result for successfully loggin in.		
	[ ] Video_35_errorPage.jsp --> simple error page, shouldn't see this at all.		
	[ ] Video_35_UserBean.java		
		Basically a copy and paste of Video_24_UserBean.java		
	
	[X] Video_35_Controller.java
	
		[ ] Follow Video 34 for setting up JNDI source
		
			[ ] Changes to Tomcat's Context.xml were already done in Video 34.
			[ ] Changes to JSP_Tutorial_6's web.xml were already done in Video 34.
			
		[ ] Create a private variable for the DataSource object:
		
				private DataSource dataSource; 		// import javax.sql.DataSource
				
		[ ] Create a private variable for the Connection object:
		
				private Connection connection = null;

		[ ] Do the following in init():				
				
				try {
					InitialContext iContext = new InitialContext();
					
					// Make Context object
					Context context = (Context)iContext.lookup("java:comp/env");
					
					// Create DataSource object by "looking up" datasource object using Context object
					dataSource = (DataSource)context.lookup("jdbc/webshop");							
				} catch (NamingException e) {
					throw new ServletException("failure to initialize context");
				}
					
		[ ] in doGet():
		
			if "director" key value equals "login" --> set the login form's defaults.
			
			call "whereDoIGo()"						
					
		[ ] in doPost():
		
			call "whereDoIGo()"		
			
		[ ] in whereDoIGo():
		
			Switch statement for "director" key. 
			Note the "doLogin(request)" method call.	
			
		[ ] in doLogin():
		
			Call validateFormData(), if form contents in valid form then:
				Call verifyAccountInfo();
				
			Depending on results of those method calls return a URL string for "where to go".
			
		[ ] in validateFormData():
		
			Make a Video_35_UserBean object and call its validate() method. If validation successful
			return true, else return false.
			
		[ ] in verifyAccountInfo():
		
			Create a SQL string.
			Call openDatabaseConnection().
			Create a prepared statement: PreparedStatement p = connection.preparedStatement(SQL string);
			Get ResultSet object back from executing the PreparedStatement.
			Get "count" (an int) back from ResultSet object.
			Call closeDatabaseConnection().
			If "count" greater than zero return true (the email & password combo exists in database), else
			return false.
			
		[ ] in openDatabaseConnection():
		
			Make a connection to the database: Connection connection = DataSource.getConnection();
				Connection & DataSource objects were created as private variables in the 
				Video_35_Controller	servlet. Hence, this becomes: connection = dataSource.getConnection();
				
		[ ] in closeDatabaseConnection():
		
			Close the connection: connection.close();
			
			
		
VIDEO #36 Notes:

	Inserting Data Into Databases
	
		I created the following for this tutorial:
		
			* Video_36_NewAccount.jsp --> a form for creating a new account.
			* Video_36_css.css --> css for form
			* Video_36_accountCreated.jsp --> where to go after successfully creating a new account
			
			
		I modified the following in trivial ways:
		
			* DirectorEnums.java --> added "NEW_ACCOUNT" and "NEW_ACCOUNT_FORM"
			* index.jsp --> added new account hyperlink
			* Video_35_Controller --> added the new enums to switch statement, added form defaults in doGet().
			
	[ ] Video_36_NewAccount.jsp
		
		[ ] Create form
		
			[ ] method set to POST
			[ ] action set to:
			
				action="<%= response.encodeURL(request.getContextPath() + "/Video_35_Controller?director=new_account_form") %>"
				
			[ ] id="newAccountForm" --> for css
			[ ] hidden <input> with name set to "director" and value set to "new_account" --> WE DONT NEED THIS, took this out! See form's action.
			[ ] <input> for email and password
			
				[ ] set their values to attributes set on the HttpServletRequest object, for example:
				
					value="<%= request.getAttribute("email") %>"
					
			[ ] a place for the error message to go:
			
				<p class="login-error"><%= request.getAttribute("errorMessage") %></p>		
				
	[X] Video_35_Controller.java
	
		[ ] in newAccount():
		
			Call validateFormData(), if form contents in valid form then:
				Call userInDatabase(), if user email not in database then:
					Check if two passwords are equal, if not equal then:
						Call createNewAccount(), if database row was updated this returns true, then:
							Create an HttpSession object and add a UserBean to it, then:
								return "whereToGo" string = .jsp page for succesfull account creation.
								
			If form data in incorrect format, send them back to new account form.					
				If user is in database, send them to login form.
					If passwords are equal, send them back to new account form.
						If database was not updated send them to error page.
				
		[ ] in userInDatabase():
		
			Check if user's email is already in database:
				
			Create a SQL string.
			Call openDatabaseConnection().
			Create a prepared statement.
			Get ResultSet object back from executing the PreparedStatement.
			Get "count" (an int) back from ResultSet object.
			Call closeDatabaseConnection().
			If "count" greater than zero return true (the email exists in database), else
			return false.		
			
			
		[ ] in createNewAccount():
		
			Create a SQL string.
			OpenDatabaseConnection().
			Create PreparedStatement.
			Obtain result int: 0 if no rows were updated in database, or 1 if one row was updated.
			If result is 1, return true.
			
				
	Additional notes for video 36:					
					
	[ ] Check to see if data really did get into database
	
		[ ] Open command prompt.
		
			I put in the following at the prompt:
			
				mysql -u webapp -p
				
			I was then prompted for a password and entered "hello".
			
			I was granted access.
			
			I typed in "use webshop" to change to that database.
			I typed in "show tables;" to show the tables --> one table: "users"
			I typed in "select * from users;" --> the email and password I entered in the
			form appear in the results.
			
	EXCELLENT! 
	
	
	
