Author: Ross Studtman

Tutorial: John Purcell's "Servlets and JSPs: Creating Web Applications With Java"
John's website: CaveOfProgramming.com
Notes for videos 39 through 49.

JSTL "Core" Tag Summary
Video #39: Beginning JSTL; Video_39_jstl.jsp shows results for videos 39 - 44.
Video #40: Accessing Bean values in JSTL
Video #41: Get URL parameters with JSTL
Video #42: JSTL "if" conidition
Video #43: JSTL "switch" condition
Video #44: JSTL "foreach" loop
Video #45: Passing objects from Servlet to JSP
Video #46: JSTL implicit objects
Video #47: Accessing maps via Expression Language (EL)
Video #48: Using EL ${} directly instead of <c:out> 
Video #49: Using JSTL to iterate throug list --> create <table>, <select>, etc.


JSTL **Core** Tag Summary (source: http://docs.oracle.com/javaee/5/jstl/1.1/docs/tlddocs/)

	catch		Catches any Throwable that occurs in its body and optionally exposes it.
	
	choose	 	Simple conditional tag that establishes a context for mutually exclusive
				conditional operations, marked by <when> and <otherwise>
				
	if	 		Simple conditional tag, which evalutes its body if the supplied condition
				is true and optionally exposes a Boolean scripting variable representing 
				the evaluation of this condition
				
	import	 	Retrieves an absolute or relative URL and exposes its contents to either 
				the page, a String in 'var', or a Reader in 'varReader'.
				
	forEach	 	The basic iteration tag, accepting many different collection types and 
				supporting subsetting and other functionality
				
	forTokens	Iterates over tokens, separated by the supplied delimeters
	
	out	 		Like <%= ... >, but for expressions.
	
	otherwise	Subtag of <choose> that follows <when> tags and runs only if all of the 
				prior conditions evaluated to 'false'
				
	param	 	Adds a parameter to a containing 'import' tag's URL.
	
	redirect	Redirects to a new URL.
	
	remove	 	Removes a scoped variable (from a particular scope, if specified).
	
	set	 		Sets the result of an expression evaluation in a 'scope'
	
	url	 		Creates a URL with optional query parameters.
	
	when	 	Subtag of <choose> that includes its body if its condition evalutes to 'true'
		

VIDEO #39 Notes:

	Beginning JSTL --> the power of java in your .jsp without actually having java in them.
	
	Scriptlets are not the current recommended technology.
	
	Need JSTL .jar file: jstl-1.2.jar. Probably comes with Java EE; 
	For Java SE probably need to download it.
	
	Put this jstl-1.2.jar in your Tomcat/lib folder.
	
	I created the following for this tutorial:
		
			* Video_39_jstl.jsp --> contains results for videos 39 - 44.
			
		
	[ ] Video_39_jstl.jsp
	
		Add this page directive to top of .jsp:
		
			<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>
			
		Add a jstl tag: 
		
			<c:out value="Hello from a c:out tag!"></c:out>
			
	Click run. Marvel at what you did. Next.
	
	
VIDEO #40 Notes:

	Accessing Bean Values in JSTL
	
	JSTL's look for the "getters" and "setters" inside a bean, 
	not the actual instance fields themselves.
	
	Much like Video 20's notes where we noted the same for jsp tag logic 
	(see: "Last note:" for Video 20).
	
	John creates a simple bean to demonstrate the above principle. I, however, 
	am simply going to copy	and paste in the Video_35_UserBean but refactor 
	the name to Video 40.
	
	I created the following for this tutorial:
		
		* beans --> a package
		* Video_40_UserBean.java --> Added "info" instance variable and it's getter.
			
		I lightly modified Video_39_jstl.jsp.
			
	[ ] Video_39_jstl.jsp
	
		Use <jsp:useBean> to associate a bean with this jsp page.
		Use the <c:out> and within the "value" use some Expression Language (EL). 
		Yes, the mysterious EL has surfaced!
		
			<p>Expression Language getting "info" from bean: <c:out value="${vid_40.info }" /></p>
			
		I tried capitalizing "info" and it didn't work, so that's case sensitive (as it should be). 
		

VIDEO #41 Notes:

	Getting URL Parameters With JSTL
	
	I lightly modified Video_39_jstl.jsp.
		
	[ ] Video_39_jstl.jsp
	
		Get a parameter from the URL:
		
			<c:out value="${param.ross }" />
			
			This looks for a URL parameter named "ross".
			

VIDEO #42 Notes:

	The JSTL "if" Conditional.
	
	The if-conditional cannot have an "else" conditional.
	
	[ ] Video_39_jstl.jsp
	
		Use the JSTL if:
		
			<c:if test="${param.name == 'Ross' }"> some output </c:if>
			
	
			
			
VIDEO #43 Notes:

	The JSTL "choose" Conditional. 
	
	Can use this like an if-else conditional.
	
	Goal: Use the JSTL choose tag in a JSP.
	
	The JSTL choose tag is a lot like a traditional switch statement:
	
		switch()
			case:
			case:
			case:
			default:
			
		
		<c:choose>
			<c:when>
			<c:when>
			<c:when>
			<c:otherwise>
	
	
			<c:choose>
			
				// if this
				<c:when test="${param.id == 1 }">
					<ul><li>ID is equal to 1</li></ul>
				</c:when>
				
				// if this
				<c:when test="${param.id == 2 }">
					<ul><li>ID is equal to 2</li></ul>
				</c:when>
				
				// else this
				<c:otherwise>
					<ul><li>Param ID was neither 1 or 2</li></ul>
				</c:otherwise>
			</c:choose>	
	
VIDEO #44 Notes:

	The JSTL "for each" Loop
	
	The JSTL forEach has several attributes you can set on it: 
(source: http://docs.oracle.com/cd/E17802_01/products/products/jsp/jstl/1.1/docs/tlddocs/c/forEach.html)
	
	Name		Required	Request-time	Type	

		
	items		false		true			java.lang.Object
	-----		-----		----			----------------
		Descritption: 	Collection of items to iterate over.
		
		
	begin		false		true			int	 
	-----		-----		----			----
		Description: 	If items specified: Iteration begins at the item located at the specified index.
						First item of the collection has index 0. If items not specified: Iteration 
						begins with index set at the value specified.
						
						
	end			false		true			int
	----		-----		----			----
		Description:	If items specified: Iteration ends at the item located at the specified 
						index (inclusive). If items not specified: Iteration ends when index 
						reaches the value specified.
						
						
	step		false		true			int	
	----		-----		-----			----
		Description: 	Iteration will only process every step items of the collection, 
						starting with the first one.
						
						
	var			false		false			java.lang.String
	----		------		-----			-----------------
		Description:	Name of the exported scoped variable for the current item of the iteration. 
						This scoped variable has nested visibility. Its type depends on the object 
						of the underlying collection.
						
						
	varStatus	false		false			java.lang.String
	----------	-----		-----			-----------------
		Description:	Name of the exported scoped variable for the status of the iteration. 
						Object exported is of type javax.servlet.jsp.jstl.core.LoopTagStatus. 	
						This scoped variable has nested visibility.
	
	
	
	JSTL forEach varStatus properties: 	
	

		Property	Getter			Description
		
		current		getCurrent()	The item (from the collection) for the current round
									of iteration
									
		index		getIndex()		The zero-based index for the current round of iteration
		
		count		getCount()		The one-based count for the current round of iteration
		
		first		isFirst()		Flag indicating whether the current round is the first 
									pass through the iteration
									
		last		isLast()		Flag indicating whether the current round is the last 
									pass through the iteration
									
		begin		getBegin()		The value of the begin attribute
		end			getEnd()		The value of the end attribute
		step		getStep()		The value of the step attribute		
		
	(source: http://www.bmchild.com/2012/03/jstl-cforeach-varstatus-properties.html)	
			

	[ ] Video_39_jstl.jsp
	
		In corroboration with the notes above, run this file to resulting html notes. 
		And of course have a peek at the code.
		
		
VIDEO #45 Notes:

	Passing Objects from Servlet to JSP --> reading properties (aka, instance fields) from the objects.
	
		I created the following for this:
		
			* Video_45_Controller.java --> creates Bean objects for passing to .jsp page.
			* Video_45_showObjects.jsp --> receives Bean objects from a variety of scoped objects.
			
		I will be using the already created:
		
			* Video_40_UserBean.java --> the Bean.
			
		See Video 31 for reminder on scopes.
		
	Quick reminder on scopes:
		page  		-->	can only live on the page
		request		-->	can only survive one "forward", either to the server or another .jsp page
		session		-->	lasts for however long Tomcat's default is (30 minutes, unless you change it)
		application	-->	lasts for as long as the JVM is running.
			
		Quick reminder on objects:
			HttpServletRequest object	--> request scope
			HttpSession object			--> session scope
			ServletContext object		--> application scope
			
			
	[ ] Video_45_Controller
	
		Create 3 bean objects, attach each to a scoped object:
		
			// Get three scoped objects (you already have a request scoped object)
			HttpSession session = request.getSession();
			ServletContext context = getServletContext();
			
			// Assign objects to scoped objects
			request.setAttribute("bean1", bean1);
			session.setAttribute("bean2", bean2);
			context.setAttribute("bean3", bean3);
			
		Forward to Video_45_showObjects.jsp.
			
	[ ] Video_45_showObjects.jsp
	
		Don't forget to add at top:
			
			<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>
			
		Display bean data, for example:
		
			Bean1: <c:out value="${bean1.email }" />
			
		Notes:
		
			If you clean your projec then run Video_45_showObjects directly:
			---> no bean data to display.
			
			If you now go through controller:
			--> all beans display data.
			
			If you now again go directly to Video_45_showObjects
			--> there's bean data for bean2 and bean3 but not bean1.
			
				This is because the request object was not set.
			
				And, I suppose if I waited for 30 minutes for the session object
				to time out then bean2 would not be set either.	The application 
				scope object data, bean3, would exist for the duration of the 
				application.
					
					
VIDEO #46 Notes:

	JSTL Implicit Objects
	
		Implicit JSTL objects:			
		
		pageContext 		- the PageContext object
		
		pageScope 			- a Map that maps page-scoped attribute names to their values
		requestScope 		- a Map that maps request-scoped attribute names to their values
		sessionScope 		- a Map that maps session-scoped attribute names to their values
		applicationScope	- a Map that maps application-scoped attribute names to their 
							  values
		
		param 				- a Map that maps parameter names to a single String parameter 
							  value. Obtained by calling:

									ServletRequest.getParameter(String)
									
								
		paramValues 		- a Map that maps parameter names to a String[ ] of all values 
							  for that parameter. Obtained by calling:
								
									ServletRequest.getParameterValues(String)
									
		
		header 				- a Map that maps header names to a single String header value.
							  Obtained by calling:

									ServletRequest.getheader(String)
									
								
		headerValues 		- a Map that maps header names to a String[ ] of all values for 
							  that parameter. Obtained by calling:

									ServletRequest.getHeaders(String)
									
		
		cookie 				- a Map that maps cookie names to a single Cookie. Obtained by
							  calling:

									HttpServletRequest.getCookie(String)
									
								
		initParam 			- a Map that maps a parameter names to a single String parameter
							  value. Obtained by calling:

									ServletRequest.getInitParameter(String)
									
				
		(Source: http://docs.oracle.com/javaee/1.3/tutorial/doc/JSTL4.html)		
			
		These scoped objects (pageScope, requestScope, sessionScope, applicationScope) 
		"provide you with an alternate mechanism for accessing scoped variables" (John).
		
		The pageContext object gives you access to all the objects that are normally 
		available to all JSP pages. See top of VideoNotes_5 for those.
		
		[ ] Video_45_showObjects.jsp
		
			Use a scoped object to acquire bean data.
			
			Video_45_Controller did:
			
				Video_40_UserBean bean2 = new Video_40_UserBean("2@1.com", "bbB12");
				HttpSession session = request.getSession();
				session.setAttribute("bean2", bean2);
				
			Video_45_showObjects.jsp did:
			
				<li>The email for bean 2 is: 
					<c:out value="${sessionScope.bean2.email }"></c:out>
				</li>
				
				...this accesses the "getter" of the Bean's email property.
			

VIDEO #47 Notes:

	Access Maps in Expression Language (EL)	
	
	[ ] Video_45_Controller
	
		in doGet():
		
			Map<String, String> map = new HashMap<>();
			map.put("Oregon", "Salem");
			
			request.setAttribute("myMap", map);		
		
	[ ] Video_45_showObjects
	
		Use this to get map values:
		
			<c:out value="${myMap['Oregon'] }"/>
			
			
VIDEO #48 Notes:

	A Different Way of Outputting variables in the JSP page vs the <c:out> tag.
	
	[ ] Video_45_Controller
		
		Add an html link as an attribute on the request object:
		
			request.setAttribute("myLink", "<a href='goSomewhere.com'>some link</a>");
			
			
	[ ] Video_45_showObjects	
		
		If you use: 	<c:out value="${myLink }" /> 	--> text is escaped
		
			result: <a href='goSomewhere.com'>some link</a>
			
		if you use: 	${myLink}						--> text is preserved
		
			result: some link (an underlined hyperlink)
		

VIDEO #49 Notes:

	Use JSTL's forEach to Iterate Through a List
	
	[ ] Video_45_Controller
	
		Create a List of the UserBeans already present.
		
			List<Video_40_UserBean> beanList = new ArrayList<>();
		
			beanList.add(bean1);
			beanList.add(bean2);
			beanList.add(bean3);
		
		Create a String array of city names.
		
			String[] cities = {"Portland", "Springfield", "Eugene"};
		
		Attach those to a session object as attributes.
		
			session.setAttribute("cities", cities);
			session.setAttribute("myList", beanList);
		
		
	[ ] Video_45_showObjects
	
		Use forEach to show objects in lists:		
					
			<c:forEach var="bunnyRabbit" items="${myList }">
				<li>User email: ${bunnyRabbit.email }, user password: ${bunnyRabbit.password }</li>				
			</c:forEach>			
	
		Use forEach to show objects in array:
		
			<c:forEach var="bunnyRabbit" items="${cities }">
				<li>City: ${bunnyRabbit }</li>				
			</c:forEach>		
			
		Use forEach to create a <select> element with <options> inside:
		
			<select>
				<c:forEach var="i" items="${cities }"> 
					<option value="${i }">${i }</option>
				</c:forEach>
			</select>			

		Use forEach to turn the bean list into a table:
		
			<table>
				<tr><th>Bean number</th><th>email</th><th>password</th></tr>
				<c:forEach var="i" items="${myList }" varStatus="varStatus">	
					<tr>
					<th>Bean number <c:out value="${varStatus.index}" />:</th>			
					<td>${i.email }</td><td>${i.password }</td>
					</tr>	
				</c:forEach>	
			</table>		

		Result:
		
			Bean number			email			password
			Bean number 0:		1@1.com 		aaA12 	
			Bean number 1:		2@1.com 		bbB12
			Bean number 2:		3@1.com 		ccC12 		
		
		
END VideoNotes_7
	
